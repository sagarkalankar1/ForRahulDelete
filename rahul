import boto3

def lambda_handler(event, context):
    try:
        # Extract the action from the event
        if 'source' in event and event['source'] == 'aws.events':
            action = event.get('detail', {}).get('action')
        else:
            action = event.get('action')

        # Validate and process the action
        if action == 'start':
            cluster_name = 'db-cluster-aurora'  # Replace with your Aurora Serverless cluster identifier
            
            # Start the Aurora Serverless cluster
            rds_client = boto3.client('rds')
            response = rds_client.start_db_cluster(DBClusterIdentifier=cluster_name)

            custom_input = event.get('customInput', {})
            return {
                'statusCode': 200,
                'body': f'Aurora Serverless cluster {cluster_name} started!',
                'customInputReceived': custom_input
            }

        elif action == 'stop':
            cluster_name = 'db-cluster-aurora'  # Replace with your Aurora Serverless cluster identifier
            
            # Stop the Aurora Serverless cluster
            rds_client = boto3.client('rds')
            response = rds_client.stop_db_cluster(DBClusterIdentifier=cluster_name)

            custom_input = event.get('customInput', {})
            return {
                'statusCode': 200,
                'body': f'Aurora Serverless cluster {cluster_name} stopped!',
                'customInputReceived': custom_input
            }

        else:
            return {
                'statusCode': 400,
                'body': 'Invalid action. Use "start" or "stop".'
            }

    except Exception as e:
        return {
            'statusCode': 500,
            'body': str(e)
        }
