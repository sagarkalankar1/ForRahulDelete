import boto3

def lambda_handler(event, context):
    try:
        # Extract the action from the event
        if 'source' in event and event['source'] == 'aws.events':
            action = event.get('detail', {}).get('action')
        else:
            action = event.get('action')

        # Validate and process the action
        if action == 'start':
            # Start the Aurora database (replace 'db_instance_identifier' with your instance identifier)
            rds_client = boto3.client('rds')
            response = rds_client.start_db_instance(DBInstanceIdentifier='db_instance_identifier')
            
            cluster_name = 'sag-ECS-cluster'
            service_name = 'service_for_ecs'
            task_definition_arn = 'arn:aws:ecs:ap-south-1:927689643452:task-definition/mynodeapp-new:60'

            ecs_client = boto3.client('ecs')
            response = ecs_client.update_service(
                cluster=cluster_name,
                service=service_name,
                taskDefinition=task_definition_arn,
                desiredCount=1
            )

            custom_input = event.get('customInput', {})
            return {
                'statusCode': 200,
                'body': 'Aurora database and ECS service started!',
                'customInputReceived': custom_input
            }

        elif action == 'stop':
            cluster_name = 'sag-ECS-cluster'
            service_name = 'service_for_ecs'
            task_definition_arn = 'arn:aws:ecs:ap-south-1:927689643452:task-definition/mynodeapp-new:60'
            
            # Stop the ECS service first
            ecs_client = boto3.client('ecs')
            response = ecs_client.update_service(
                cluster=cluster_name,
                service=service_name,
                taskDefinition=task_definition_arn,
                desiredCount=0
            )
            
            # Stop the Aurora database (replace 'db_instance_identifier' with your instance identifier)
            rds_client = boto3.client('rds')
            response = rds_client.stop_db_instance(DBInstanceIdentifier='db_instance_identifier')

            custom_input = event.get('customInput', {})
            return {
                'statusCode': 200,
                'body': 'ECS service stopped and Aurora database stopped!',
                'customInputReceived': custom_input
            }

        else:
            return {
                'statusCode': 400,
                'body': 'Invalid action. Use "start" or "stop".'
            }

    except Exception as e:
        return {
            'statusCode': 500,
            'body': str(e)
        }
